任务2： 跟申请人“243014”有关联的其他申请人中，有多少人之前有过逾期的记录（OVER_DUE）？(20 points)
    1) 直接关联：
    match (n:Person {personId:'243014'})-[:FRIEND_OF|:COLLEAGEU_OF|:COLLEAGUE_OF|:COLLEAUGE_OF]-(x:Person)--(a:Application {status:'OVER_DUE'})  return count(a)
    结果: 2 
    2) 多度关系的话，实际应用中，可以做2多或者3度，再多层可能没有实际意义，看具体业务。如果需要查询多度的话，在关系后面限定查询的层数（eg: 1..3）。  
    match (n:Person {personId:'243014'})-[:FRIEND_OF|:COLLEAGEU_OF|:COLLEAGUE_OF|:COLLEAUGE_OF*1..]-(x:Person) where n <> x with distinct x as xdis match (xdis)--(a:Application {status:'OVER_DUE'}) return count(a)
    结果：8 
任务3： 图中总共有多少种类的关系不一致（Person和Person之间的关系，只考虑三角关系）？ 每种关系的不一致各出现了多少次？ 请返回次数。 返回的格式为：(20 points)
   1) match p=(n1:Person)--(n2:Person)--(n3:Person)--(n1)  where id(n1)>id(n2)>id(n3)  return count(p)
   结果: 3

任务4： 仅考虑由电话号实体构成的电话知识图谱，则在图谱中出现了多少个由三个节点（电话）构成的团（Clique）并且每个团至少包含一个标记为Black的电话实体。(20 points)
   1) MATCH p=(n1:Phone)--(n2:Phone:Black)--(n3:Phone)--(n1) where id(n1)>id(n2)>id(n3) return count(p)
   结果：9

任务5：对于申请人”243014“， 在他所有三度关系之内（包含1度，2度，3度，考虑所有实体类型）有多少个电话号被标记为”Black“?  (20 points)
   1)  match p=(n:Person {personId: '243014'})-[*..3]-(nn:Person)--(x:Black) return count(distinct(x))
   结果：8

任务6： 列出从申请人实体“243001”到申请人实体“243019”的最短路径所经过的所有的实体ID。(20 points)
   1) match p=allShortestPaths((n1:Person {personId:'243001'})-[*..]-(n2:Person {personId:'243019'})) return [n in nodes(p) | n.personId]
   结果：["243001", "243002", "243003", "243019"]


